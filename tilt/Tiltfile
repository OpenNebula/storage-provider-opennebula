# -*- mode: Python -*-
load('ext://restart_process', 'docker_build_with_restart')

local_resource(
  name='opennebula-csi-plugin-bin',
  dir='..',
  cmd='CGO_ENABLED=0 go build -o ./tilt/build/opennebula-csi-plugin ./cmd/opennebula-csi-plugin/main.go',
  deps=[
    '../cmd/opennebula-csi-plugin/main.go',
    '../pkg/csi',
    '../go.mod',
    '../go.sum'
  ]
)

docker_build_with_restart(
    ref=os.getenv('LOCAL_REGISTRY')+'/opennebula-csi-plugin',
    context='..',
    dockerfile='Dockerfile.dev',
    only=[
        'tilt/build/opennebula-csi-plugin',
        'Dockerfile.dev'
    ],
    live_update=[
        sync(local_path='./tilt/build/opennebula-csi-plugin', remote_path='/app'),
    ],
    entrypoint=['/app/opennebula-csi-plugin'],
)

# Deploy to workload cluster
yaml = helm('../helm/opennebula-csi-plugin',
    name='opennebula-csi-plugin',
    set=[
        'image.repository=' + os.getenv('LOCAL_REGISTRY') + '/opennebula-csi-plugin',
        #'image.tag=' + os.getenv('LOCAL_TAG'), # Will be overridden by Tilt
        'image.pullPolicy=Always',
        'oneApiEndpoint=' + os.getenv('ONE_XMLRPC'),
        'oneAuth=' + os.getenv('ONE_AUTH'),
    ]
)
allow_k8s_contexts(os.getenv('WORKLOAD_CLUSTER_NAME') + '-admin@' + os.getenv('WORKLOAD_CLUSTER_NAME')) #for safety reasons
k8s_yaml(yaml)