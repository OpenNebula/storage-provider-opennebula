# -*- mode: Python -*-
load('ext://restart_process', 'docker_build_with_restart')

DEFAULT_DEBUG_PORT = "5000"

local_resource(
  name='opennebula-csi-plugin-bin',
  dir='..',
  cmd='CGO_ENABLED=0 go build -gcflags "-N -l" -o ./tilt/build/opennebula-csi-plugin ./cmd/opennebula-csi-plugin/main.go',
  deps=[
    '../cmd/opennebula-csi-plugin/main.go',
    '../pkg/csi',
    '../go.mod',
    '../go.sum'
  ]
)

docker_build_with_restart(
    ref=os.getenv('LOCAL_REGISTRY')+'/opennebula-csi-plugin',
    context='..',
    dockerfile='Dockerfile.debug',
    only=[
        'tilt/build/opennebula-csi-plugin',
        'Dockerfile.debug'
    ],
    build_args={
        'DEBUG_PORT': os.getenv('DEBUG_PORT', DEFAULT_DEBUG_PORT),  # Default to 5000 if not set
    },
    live_update=[
        sync(local_path='./tilt/build/opennebula-csi-plugin', remote_path='/app'),
    ],
    entrypoint=[
        'dlv',
        '--listen=0.0.0.0:' + os.getenv('DEBUG_PORT', DEFAULT_DEBUG_PORT),
        '--api-version=2',
        '--headless=true',
        'exec',
        '/app/opennebula-csi-plugin',
        '--continue',
        '--accept-multiclient',
        '--'
    ],
)

# Deploy to workload cluster
yaml = helm('../helm/opennebula-csi-plugin',
    name='opennebula-csi-plugin',
    set=[
        'image.repository=' + os.getenv('LOCAL_REGISTRY') + '/opennebula-csi-plugin',
        #'image.tag=' + os.getenv('LOCAL_TAG'), # Will be overridden by Tilt
        'image.pullPolicy=Always',
        'oneApiEndpoint=' + os.getenv('ONE_XMLRPC'),
        'oneAuth=' + os.getenv('ONE_AUTH'),
        'debugPort=' + os.getenv('DEBUG_PORT', DEFAULT_DEBUG_PORT),  # Default to 5000 if not set
    ]
)
allow_k8s_contexts(os.getenv('WORKLOAD_CLUSTER_NAME') + '-admin@' + os.getenv('WORKLOAD_CLUSTER_NAME')) #for safety reasons
k8s_yaml(yaml)
